diff --git a/frontend/package.json b/frontend/package.json
index a204e927b..2f5db06e4 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -31,6 +31,7 @@
     "codemirror": "^6",
     "codemirror-lang-liquidsoap": "^0.2.5",
     "hls.js": "^1.1.5",
+    "icecast-metadata-player": "^1.17.2",
     "leaflet": "^1.7.1",
     "leaflet-fullscreen": "^1.0.2",
     "lodash": "^4.17.21",
diff --git a/frontend/src/components/Common/AudioPlayer.vue b/frontend/src/components/Common/AudioPlayer.vue
index fabfa98f4..305d35bf6 100644
--- a/frontend/src/components/Common/AudioPlayer.vue
+++ b/frontend/src/components/Common/AudioPlayer.vue
@@ -12,6 +12,7 @@ import Hls from 'hls.js';
 import {computed, nextTick, onMounted, onScopeDispose, ref, toRef, watch} from "vue";
 import {usePlayerStore} from "~/functions/usePlayerStore.ts";
 import {watchThrottled} from "@vueuse/core";
+import IcecastMetadataPlayer from "icecast-metadata-player";
 
 const props = defineProps({
     title: {
@@ -43,23 +44,68 @@ const {isPlaying, current, stop: storeStop} = usePlayerStore();
 
 const bc = ref<BroadcastChannel | null>(null);
 
+let icePlayer = getIcePlayer();
+
+function getIcePlayer(url = '') {
+    return new IcecastMetadataPlayer(url, {
+        metadataTypes: ["ogg"],
+        retryTimeout: 5,
+        onMetadata(metadata) {
+            document.dispatchEvent(new CustomEvent("icy-metadata-update", {
+                detail: {
+                    title: metadata.TITLE || '',
+                    album: metadata.ALBUM || '',
+                    artist: metadata.ARTIST || '',
+                    genre: metadata.GENRE || ''
+                }
+            }));
+        },
+        onLoad() {
+            icePlayer.audioElement.volume = getLogarithmicVolume(props.volume);
+            icePlayer.audioElement.muted = props.isMuted;
+            duration.value = 0;
+        },
+        onStreamEnd() {
+            stop();
+        },
+        onError() {
+            console.log('Network interrupted stream. Automatically reconnecting shortly...');
+            setTimeout(() => {
+                play();
+            }, 5000);
+        },
+        onCodecUpdate: (_, updateTimestamp) => {
+            currentTime.value = updateTimestamp;
+        },
+    } as any);
+}
+
 watch(toRef(props, 'volume'), (newVol) => {
     if ($audio.value !== null) {
         $audio.value.volume = getLogarithmicVolume(newVol);
     }
+    if (icePlayer.audioElement !== null) {
+        icePlayer.audioElement.volume = getLogarithmicVolume(newVol);
+    }
 });
 
 watch(toRef(props, 'isMuted'), (newMuted) => {
     if ($audio.value !== null) {
         $audio.value.muted = newMuted;
     }
+    if (icePlayer.audioElement !== null) {
+        icePlayer.audioElement.muted = newMuted;
+    }
 });
 
 const stop = () => {
-    if ($audio.value !== null) {
+    if ($audio.value !== null && $audio.value.src) {
         $audio.value.pause();
         $audio.value.src = '';
     }
+    if (icePlayer.state !== 'stopping' && icePlayer.state !== 'stopped') {
+        icePlayer.stop();
+    }
 
     if (hls.value !== null) {
         hls.value.destroy();
@@ -120,17 +166,23 @@ const play = () => {
             }
         } else {
             // Standard streams
-            $audio.value.src = current.value.url;
+            let src = current.value.url;
 
             // Firefox caches the downloaded stream, this causes playback issues.
             // Giving the browser a new url on each start bypasses the old cache/buffer
             if (navigator.userAgent.includes("Firefox")) {
-                $audio.value.src += "?refresh=" + Date.now();
+                src += "?refresh=" + Date.now();
             }
+
+            icePlayer = getIcePlayer(src);
         }
 
-        $audio.value.load();
-        $audio.value.play();
+        if ($audio.value.src) {
+            $audio.value.load();
+            $audio.value.play();
+        } else {
+            icePlayer.play();
+        }
 
         if (bc.value) {
             bc.value.postMessage('played');
@@ -177,7 +229,7 @@ watchThrottled(
 );
 
 const setProgress = (progress: number) => {
-    if ($audio.value !== null) {
+    if ($audio.value !== null && $audio.value.src) {
         $audio.value.currentTime = (progress / 100) * duration.value;
     }
 };
diff --git a/frontend/src/functions/useNowPlaying.ts b/frontend/src/functions/useNowPlaying.ts
index cbcaf27e0..6d87392d0 100644
--- a/frontend/src/functions/useNowPlaying.ts
+++ b/frontend/src/functions/useNowPlaying.ts
@@ -1,8 +1,6 @@
 import NowPlaying from '~/entities/NowPlaying';
-import {computed, onMounted, ref, shallowRef, watch} from "vue";
-import {useEventSource, useIntervalFn} from "@vueuse/core";
-import {useAxios} from "~/vendor/axios";
-import {has} from "lodash";
+import {computed, onMounted, ref, shallowRef} from "vue";
+import {useEventListener, useIntervalFn} from "@vueuse/core";
 import formatTime from "~/functions/formatTime";
 
 export const nowPlayingProps = {
@@ -63,6 +61,7 @@ export default function useNowPlaying(props) {
     // Trigger initial NP set.
     setNowPlaying(np.value);
 
+    /*
     if (props.useSse) {
         const {data} = useEventSource(props.sseUri);
         watch(data, (data_raw) => {
@@ -114,6 +113,25 @@ export default function useNowPlaying(props) {
             setTimeout(checkNowPlaying, 5000);
         });
     }
+    */
+
+    useEventListener(document, "icy-metadata-update", (evt: CustomEvent) => {
+        setNowPlaying({
+            ...(np.value || {}),
+            is_online: true,
+            now_playing: {
+                ...(np.value.now_playing || {}),
+                song: {
+                    ...(np.value.now_playing.song || {}),
+                    text: `${evt.detail.artist} - ${evt.detail.title}`,
+                    artist: evt.detail.artist,
+                    title: evt.detail.title,
+                    album: evt.detail.album,
+                    genre: evt.detail.genre
+                }
+            }
+        });
+    });
 
     onMounted(() => {
         useIntervalFn(
